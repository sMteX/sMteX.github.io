{"version":3,"sources":["HopfieldCanvas.tsx","HopfieldSettings.tsx","HopfieldNet.ts","HopfieldHistory.tsx","City.ts","HopfieldUI.tsx","App.tsx","index.tsx"],"names":["HopfieldCanvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","i","handleCanvasClick","bind","assertThisInitialized","handleCityClick","event","evt","button","addCity","index","x","offsetX","y","offsetY","_this2","paths","length","removeCity","_this3","pathsWithCoords","react_default","a","createElement","ReactKonva","width","height","onClick","onContextMenu","_ref","preventDefault","stroke","map","_ref2","order","points","key","strokeWidth","cities","_ref3","shiftX","Fragment","radius","fill","text","toString","_this4","path","startX","startCityIndex","startY","endX","endCityIndex","endY","lengths","Math","sqrt","pow","forEach","l","coords","lengthCoords","React","Component","HopfieldSettings","handleSettingsChange","prop","newAdvanced","settings","advanced","setSettings","defineProperty","Number","currentTarget","value","Row","Col","md","style","textAlign","type","step","onChange","dt","alpha","tau","A","B","C","D","maxIterations","DIAG_DIST","HopfieldNet","n","weights","activations","outputs","cityOutputs","timeOutputs","totalOutput","distances","tourByCity","tourByTime","isTourFound","initializeSquareMatrix","initializeArray","populateDistances","setupNeurons","totalConstraint","distanceConstraint","jp","jm","cityConstraint","timeConstraint","delta","oldEnergy","newEnergy","energy","calculateActivations","calculateOutputs","findTour","minDist","MAX_VALUE","minPaths","minK","thresholdsHit","k","dist","totalDistance","toConsumableArray","distance","tag","max","calculateWeightMatrix","assignInputs","t1","j","t2","Dxy","kroneckerDelta","Dij","Dijp","Dijm","inputMatrix","random","tanh","calculateDistance","t3","t4","p","q","Error","b","Array","from","_","rows","row","concat","output","toFixed","join","HopfieldHistory","optionChanged","overrideState","history","find","item","Input","size","City","DEFAULT_SETTINGS","DEFAULT_CITIES","HopfieldUI","historyI","state","findPaths","setDefaultCities","reset","clearHistory","newSettings","merged","objectSpread","setState","city","prevState","filter","c","_paths","_distance","net","console","log","_net$train","train2","transformPaths","train","push","JSON","parse","stringify","undefined","marginTop","HopfieldSettings_HopfieldSettings","Button","marginLeft","HopfieldHistory_HopfieldHistory","sort","HopfieldCanvas_HopfieldCanvas","App","Container","fluid","offset","HopfieldUI_HopfieldUI","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.dac5f487.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Circle, Layer, Line, Rect, Stage, Text} from \"react-konva\";\r\nimport * as Konva from \"konva\";\r\nimport {ICity, IPath} from \"./HopfieldUI\";\r\n\r\nconst LEFT_BUTTON = 0;\r\nconst RIGHT_BUTTON = 2;\r\n\r\ninterface IProps {\r\n  addCity(city: ICity): any;\r\n  removeCity(index: number): any;\r\n  cities: ICity[];\r\n  paths: IPath[];\r\n}\r\n\r\ninterface IPathWithCoords {\r\n  order: number;\r\n  points: number[];\r\n  length: number;\r\n  lengthCoords: {\r\n    x: number;\r\n    y: number;\r\n  }\r\n}\r\n\r\nexport default class HopfieldCanvas extends React.Component<IProps, {}> {\r\n  i = 0;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.handleCanvasClick = this.handleCanvasClick.bind(this);\r\n    this.handleCityClick = this.handleCityClick.bind(this);\r\n  }\r\n\r\n  handleCanvasClick(event: Konva.KonvaEventObject<MouseEvent>): void {\r\n    if (event.evt.button === LEFT_BUTTON) {\r\n      this.props.addCity({\r\n        index: this.i,\r\n        x: event.evt.offsetX,\r\n        y: event.evt.offsetY\r\n      });\r\n      this.i++;\r\n    }\r\n  }\r\n\r\n  handleCityClick(i: number): (event: Konva.KonvaEventObject<MouseEvent>) => void {\r\n    return (event) => {\r\n      if (this.props.paths.length === 0 && event.evt.button === RIGHT_BUTTON) {\r\n        this.props.removeCity(i);\r\n      }\r\n    };\r\n  }\r\n\r\n  get pathsWithCoords(): IPathWithCoords[] {\r\n    const paths = this.props.paths.map(path => ({\r\n      order: path.order,\r\n      startX: this.props.cities[path.startCityIndex].x,\r\n      startY: this.props.cities[path.startCityIndex].y,\r\n      endX: this.props.cities[path.endCityIndex].x,\r\n      endY: this.props.cities[path.endCityIndex].y,\r\n    }));\r\n    const lengths = this.props.paths.map(path => {\r\n      const startX = this.props.cities[path.startCityIndex].x;\r\n      const startY = this.props.cities[path.startCityIndex].y;\r\n      const endX = this.props.cities[path.endCityIndex].x;\r\n      const endY = this.props.cities[path.endCityIndex].y;\r\n      const length = Math.sqrt(Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2));\r\n      return {\r\n        startCityIndex: path.startCityIndex,\r\n        endCityIndex: path.endCityIndex,\r\n        length: length,\r\n      };\r\n    });\r\n    // console.table(lengths);\r\n    let total = 0;\r\n    lengths.forEach(l => {\r\n      total += l.length;\r\n    });\r\n    // console.log(`Total distance: ${total}`);\r\n    return paths.map(path => {\r\n      const length = Math.sqrt(Math.pow(path.endX - path.startX, 2) + Math.pow(path.endY - path.startY, 2));\r\n      const coords = {\r\n        x: path.startX + (path.endX - path.startX) / 2,\r\n        y: path.startY + (path.endY - path.startY) / 2,\r\n      };\r\n      return {\r\n        order: path.order,\r\n        points: [path.startX, path.startY, path.endX, path.endY],\r\n        length: length,\r\n        lengthCoords: coords,\r\n      };\r\n    });\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    const paths = this.pathsWithCoords;\r\n    return (\r\n      <Stage width={500} height={500} onClick={this.handleCanvasClick} onContextMenu={({ evt }) => evt.preventDefault()}>\r\n        <Layer>\r\n          <Rect\r\n            x={0}\r\n            y={0}\r\n            width={500}\r\n            height={500}\r\n            stroke=\"black\"\r\n          />\r\n          {paths.map(({order, points}) => (\r\n            <Line\r\n              key={order}\r\n              points={points}\r\n              stroke=\"green\"\r\n              strokeWidth={2}\r\n            />\r\n          ))}\r\n          {this.props.cities.map(({index, x, y}) => {\r\n            const shiftX = index >= 10 ? -7 : -3;\r\n            const shiftY = -18;\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <Circle\r\n                  x={x}\r\n                  y={y}\r\n                  radius={8}\r\n                  fill=\"red\"\r\n                  onClick={this.handleCityClick(index)}\r\n                />\r\n                <Text\r\n                  text={index.toString()}\r\n                  x={x + shiftX}\r\n                  y={y + shiftY}\r\n                />\r\n              </React.Fragment>\r\n            )\r\n          })}\r\n        </Layer>\r\n      </Stage>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {ISettings} from './HopfieldUI';\r\nimport {Col, Row} from \"reactstrap\";\r\n\r\ninterface IProps {\r\n  setSettings(newSettings: Partial<ISettings>): any;\r\n  settings: ISettings;\r\n}\r\nexport default class HopfieldSettings extends React.Component<IProps, {}> {\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.handleSettingsChange = this.handleSettingsChange.bind(this);\r\n  }\r\n\r\n  handleSettingsChange(prop: keyof ISettings): (event: React.FormEvent<HTMLInputElement>) => void {\r\n    return (event: React.FormEvent<HTMLInputElement>) => {\r\n      if (prop === 'advanced') {\r\n        const newAdvanced = !this.props.settings.advanced;\r\n        this.props.setSettings({\r\n          advanced: newAdvanced,\r\n        });\r\n      }\r\n      else {\r\n        this.props.setSettings({\r\n          [prop]: Number(event.currentTarget.value),\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col md={4} style={{ textAlign: 'right' }}>\r\n            <label>dt:</label>\r\n          </Col>\r\n          <Col md={8}>\r\n            <input type=\"number\" step={0.01} onChange={this.handleSettingsChange('dt')} value={this.props.settings.dt} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={4} style={{ textAlign: 'right' }}>\r\n            <label>alpha:</label>\r\n          </Col>\r\n          <Col md={8}>\r\n            <input type=\"number\" step={1} onChange={this.handleSettingsChange('alpha')} value={this.props.settings.alpha} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={4} style={{ textAlign: 'right' }}>\r\n            <label>tau:</label>\r\n          </Col>\r\n          <Col md={8}>\r\n            <input type=\"number\" step={0.1} onChange={this.handleSettingsChange('tau')} value={this.props.settings.tau} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={4} style={{ textAlign: 'right' }}>\r\n            <label>A:</label>\r\n          </Col>\r\n          <Col md={8}>\r\n            <input type=\"number\" step={0.05} onChange={this.handleSettingsChange('A')} value={this.props.settings.A} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={4} style={{ textAlign: 'right' }}>\r\n            <label>B:</label>\r\n          </Col>\r\n          <Col md={8}>\r\n            <input type=\"number\" step={0.05} onChange={this.handleSettingsChange('B')} value={this.props.settings.B} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={4} style={{ textAlign: 'right' }}>\r\n            <label>C:</label>\r\n          </Col>\r\n          <Col md={8}>\r\n            <input type=\"number\" step={0.05} onChange={this.handleSettingsChange('C')} value={this.props.settings.C} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={4} style={{ textAlign: 'right' }}>\r\n            <label>D:</label>\r\n          </Col>\r\n          <Col md={8}>\r\n            <input type=\"number\" step={0.05} onChange={this.handleSettingsChange('D')} value={this.props.settings.D} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={4} style={{ textAlign: 'right' }}>\r\n            <label>max. iterací:</label>\r\n          </Col>\r\n          <Col md={8}>\r\n            <input type=\"number\" step={10} onChange={this.handleSettingsChange('maxIterations')} value={this.props.settings.maxIterations} />\r\n          </Col>\r\n        </Row>\r\n        {/*<input type=\"checkbox\" onChange={this.handleSettingsChange('advanced')} checked={this.props.settings.advanced} /> <br />*/}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import City from \"./City\";\r\nimport {ISettings} from \"./HopfieldUI\";\r\n\r\nconst DIAG_DIST = Math.sqrt(2 * 500 * 500);\r\n\r\nexport default class HopfieldNet {\r\n  private readonly n: number;\r\n\r\n  private readonly weights: number[][];\r\n  private readonly activations: number[][];\r\n  public readonly outputs: number[][];\r\n\r\n  private readonly cityOutputs: number[];\r\n  private readonly timeOutputs: number[];\r\n  private totalOutput: number;\r\n\r\n  private readonly distances: number[][];\r\n\r\n  private readonly tourByCity: number[];\r\n  public readonly tourByTime: number[];\r\n\r\n  private readonly maxIterations: number;\r\n  private readonly dt: number;\r\n  private readonly alpha: number;\r\n  private readonly tau: number;\r\n  private readonly A: number;\r\n  private readonly B: number;\r\n  private readonly C: number;\r\n  private readonly D: number;\r\n\r\n  private isTourFound: boolean = false;\r\n\r\n  constructor(cities: City[],\r\n              settings: ISettings) {\r\n    const {dt, alpha, A, B, C, D, maxIterations, tau} = settings;\r\n    this.dt = dt;\r\n    this.alpha = alpha;\r\n    this.tau = tau;\r\n    this.A = A;\r\n    this.B = B;\r\n    this.C = C;\r\n    this.D = D;\r\n    this.maxIterations = maxIterations;\r\n    this.n = cities.length;\r\n\r\n    this.weights = HopfieldNet.initializeSquareMatrix(this.n * this.n);\r\n    this.activations = HopfieldNet.initializeSquareMatrix(this.n);\r\n    this.outputs = HopfieldNet.initializeSquareMatrix(this.n);\r\n    this.cityOutputs = HopfieldNet.initializeArray(this.n);\r\n    this.timeOutputs = HopfieldNet.initializeArray(this.n);\r\n    this.totalOutput = 0;\r\n\r\n    this.distances = HopfieldNet.initializeSquareMatrix(this.n);\r\n\r\n    this.tourByCity = HopfieldNet.initializeArray(this.n);\r\n    this.tourByTime = HopfieldNet.initializeArray(this.n);\r\n\r\n    this.populateDistances(cities);\r\n    this.setupNeurons();\r\n  }\r\n\r\n  private get energy(): number {\r\n    let t1 = 0.0;\r\n    let t2 = 0.0;\r\n    let t3 = 0.0;\r\n    let t4 = 0.0;\r\n\r\n    for (let i = 0; i < this.n; i++) {\r\n      const p = (i === this.n - 1) ? 0 : i + 1;\r\n      const q = (i === 0) ? this.n - 1: i - 1;\r\n      for (let j = 0; j < this.n; j++) {\r\n        t3 += this.outputs[i][j];\r\n        for (let k = 0; k < this.n; k++) {\r\n          if (k !== j) {\r\n            t1 += this.outputs[i][j] * this.outputs[i][k];\r\n            t2 += this.outputs[j][i] * this.outputs[k][i];\r\n            t4 += this.distances[k][j] * this.outputs[k][i] * (this.outputs[j][p] + this.outputs[j][q]) / DIAG_DIST;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return 0.5 * (this.A * t1 + this.B * t2 + this.C * Math.pow(t3 - this.n, 2) + this.D * t4);\r\n  }\r\n\r\n  private calculateActivations(): void {\r\n    const totalConstraint = this.totalOutput - this.n;\r\n\r\n    for (let x = 0; x < this.n; x++) {\r\n      for (let i = 0; i < this.n; i++) {\r\n        let distanceConstraint = 0.0;\r\n\r\n        const jp = (i === this.n - 1) ? 0 : i + 1;\r\n        const jm = (i === 0) ? this.n - 1 : i - 1;\r\n\r\n        const cityConstraint = this.cityOutputs[x] - this.outputs[x][i];\r\n        const timeConstraint = this.timeOutputs[i] - this.outputs[x][i];\r\n\r\n        for (let y = 0; y < this.n; y++) {\r\n          distanceConstraint += this.distances[x][y] * (this.outputs[y][jp] + this.outputs[y][jm]) / DIAG_DIST;\r\n        }\r\n\r\n        const delta = this.dt * (- this.activations[x][i] / this.tau\r\n                      - this.A * cityConstraint\r\n                      - this.B * timeConstraint\r\n                      - this.C * totalConstraint\r\n                      - this.D * distanceConstraint);\r\n        this.activations[x][i] += delta;\r\n      }\r\n    }\r\n  }\r\n\r\n  public train(): void {\r\n    let oldEnergy, newEnergy;\r\n    const THRESHOLD = 0.0000001;\r\n\r\n    oldEnergy = this.energy;\r\n\r\n    let i = 0;\r\n\r\n    do {\r\n      this.calculateActivations();\r\n      this.calculateOutputs();\r\n      newEnergy = this.energy;\r\n\r\n      if (oldEnergy - newEnergy < THRESHOLD) {\r\n        break;\r\n      }\r\n\r\n      oldEnergy = newEnergy;\r\n      i++;\r\n    } while (i < this.maxIterations);\r\n\r\n    this.findTour();\r\n  }\r\n\r\n  public train2(): { paths: number[], distance: number, k: number } {\r\n    let oldEnergy, newEnergy;\r\n    const THRESHOLD = 0.000001;\r\n    const CONSECUTIVE_LOWS = 50;\r\n\r\n    oldEnergy = this.energy;\r\n\r\n    let i = 0;\r\n    let minDist = Number.MAX_VALUE;\r\n    let minPaths: number[] = [];\r\n    let minK = 0;\r\n    let thresholdsHit = 0;\r\n\r\n    for (let k = 0; k < 1000; k++) {\r\n      i = 0;\r\n      this.setupNeurons();\r\n      thresholdsHit = 0;\r\n      do {\r\n        this.calculateActivations();\r\n        this.calculateOutputs();\r\n        newEnergy = this.energy;\r\n\r\n        if (oldEnergy - newEnergy < THRESHOLD) {\r\n          thresholdsHit++;\r\n        } else {\r\n          thresholdsHit = 0;\r\n        }\r\n\r\n        if (thresholdsHit === CONSECUTIVE_LOWS) {\r\n          break;\r\n        }\r\n\r\n        oldEnergy = newEnergy;\r\n        i++;\r\n      } while (i < this.maxIterations);\r\n      this.findTour();\r\n      const dist = this.totalDistance;\r\n      if (dist < minDist) {\r\n        minDist = dist;\r\n        minPaths = [...this.tourByTime]; // tourByTime is number[], this should create copy\r\n        minK = k;\r\n      }\r\n    }\r\n    return { paths: minPaths, distance: minDist, k: minK };\r\n  }\r\n\r\n  private findTour(): void {\r\n    // tag is an array of \"checked neurons\"\r\n    const tag = HopfieldNet.initializeSquareMatrix(this.n);\r\n    const max = {\r\n      value: <number> -10.0,\r\n      x: <number | null> null,\r\n      i: <number | null> -1,\r\n    };\r\n\r\n    for (let x = 0; x < this.n; x++) {\r\n      for (let i = 0; i < this.n; i++) {\r\n        tag[x][i] = 0;\r\n      }\r\n    }\r\n\r\n    // for each city\r\n    for (let x = 0; x < this.n; x++) {\r\n      // keep track of maximum output of neurons for that city\r\n      max.value = -10.0;\r\n      for (let i = 0; i < this.n; i++) {\r\n        // first, iterate through the row, find maximum output in UNVISITED neurons\r\n        for (let k = 0; k < this.n; k++) {\r\n          if (this.outputs[x][k] >= max.value && tag[x][k] === 0) {\r\n            max.value = this.outputs[x][k];\r\n            max.x = x;\r\n            max.i = k;\r\n          }\r\n        }\r\n        // if the neuron is the maximum and is unvisited\r\n        if (x === max.x && i === max.i && tag[x][i] === 0) {\r\n          // mark the neuron as part of paths\r\n          this.tourByCity[x] = i;\r\n          this.tourByTime[i] = x;\r\n          // tag all other neurons for the same city or time as visited (there can no longer be a maximum found)\r\n          for (let k = 0; k < this.n; k++) {\r\n            tag[x][k] = 1;\r\n            tag[k][i] = 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.isTourFound = true;\r\n  }\r\n\r\n  public get totalDistance(): number {\r\n    if (!this.isTourFound) {\r\n      throw new Error(\"Tour wasn't found yet\");\r\n    }\r\n\r\n    let totalDistance = 0.0;\r\n\r\n    for (let i = 0; i < this.n; i++) {\r\n      const k = this.tourByTime[i];\r\n      const l = (i === this.n - 1) ? this.tourByTime[0] : this.tourByTime[i + 1];\r\n      totalDistance += this.distances[k][l];\r\n    }\r\n\r\n    return totalDistance;\r\n  }\r\n\r\n  private setupNeurons(): void {\r\n    this.calculateWeightMatrix();\r\n    this.assignInputs();\r\n    this.calculateOutputs();\r\n  }\r\n\r\n  private calculateWeightMatrix(): void {\r\n    // calculate weight matrix\r\n    // weight matrix is N^2 * N^2 (connects 2 neurons and each neuron is indexed by 2 variables too)\r\n    // for indexes - first neuron = Uxi, second neuron = Uyj\r\n    for (let x = 0; x < this.n; x++) {\r\n      for (let i = 0; i < this.n; i++) {\r\n        // encoding first neuron index\r\n        const t1 = i + x * this.n;\r\n        for (let y = 0; y < this.n; y++) {\r\n          for (let j = 0; j < this.n; j++) {\r\n            // encoding second neuron index\r\n            const t2 = j + y * this.n;\r\n            // j-1 and j+1 actually wrap around the neurons?\r\n            const jp = (j === this.n - 1) ? 0 : j + 1;\r\n            const jm = (j === 0) ? this.n - 1: j - 1;\r\n\r\n            const Dxy = HopfieldNet.kroneckerDelta(x, y);\r\n            const Dij = HopfieldNet.kroneckerDelta(i, j);\r\n            const Dijp = HopfieldNet.kroneckerDelta(i, jp);\r\n            const Dijm = HopfieldNet.kroneckerDelta(i, jm);\r\n\r\n            // calculating weight between Uxi and Uyj\r\n            this.weights[t1][t2] = -this.A * Dxy * (1 - Dij)\r\n                                   -this.B * Dij * (1 - Dxy)\r\n                                   -this.C\r\n                                   -this.D * this.distances[x][y] * (Dijp + Dijm) / DIAG_DIST;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private assignInputs(): void {\r\n    // initialize a random NxN matrix of values (-1, 0) ?\r\n    const inputMatrix: number[][] = HopfieldNet.initializeSquareMatrix(this.n);\r\n    for (let i = 0; i < this.n; i++) {\r\n      inputMatrix[i] = [];\r\n      for (let j = 0; j < this.n; j++) {\r\n        inputMatrix[i][j] = Math.random(); // -1; 1\r\n      }\r\n    }\r\n    // reset activations for all neurons\r\n    for (let i = 0; i < this.n; i++) {\r\n      for (let j = 0; j < this.n; j++) {\r\n        this.activations[i][j] = 0.0;\r\n      }\r\n    }\r\n\r\n    // initialize activations - which is a weighted sum of all concerned weights into the single neuron it seems\r\n    // first, iterate through \"target\" neurons (which we set the activation of)\r\n    for (let x = 0; x < this.n; x++) {\r\n      for (let i = 0; i < this.n; i++) {\r\n        // coordinate transform\r\n        const t1 = i + x * this.n;\r\n        // for each target neuron, iterate through all neurons again (Hopfield net is fully connected)\r\n        for (let y = 0; y < this.n; y++) {\r\n          for (let j = 0; j < this.n; j++) {\r\n            const t2 = j + y * this.n;\r\n            // activation is sum of all weights going into the neuron multiplied by the input of target neuron\r\n            this.activations[x][i] += this.weights[t1][t2] * inputMatrix[x][i];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private calculateOutputs(): void {\r\n    this.totalOutput = 0.0;\r\n\r\n    for (let x = 0; x < this.n; x++) {\r\n      // cityOutputs[x] represents total sum of outputs for a city x\r\n      this.cityOutputs[x] = 0.0;\r\n      for (let i = 0; i < this.n; i++) {\r\n        this.outputs[x][i] = (1.0 + Math.tanh(this.alpha * this.activations[x][i])) / 2.0;\r\n        this.cityOutputs[x] += this.outputs[x][i];\r\n      }\r\n      // total output is just sum of all city outputs\r\n      this.totalOutput += this.cityOutputs[x];\r\n    }\r\n    for (let i = 0; i < this.n; i++) {\r\n      // orderOutputs[x] is sum of outputs for time/order x\r\n      this.timeOutputs[i] = 0.0;\r\n      for (let x = 0; x < this.n; x++) {\r\n        this.timeOutputs[i] += this.outputs[x][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  private populateDistances(cities: City[]): void {\r\n    for (let i = 0; i < this.n; i++) {\r\n      for (let j = 0; j < this.n; j++) {\r\n        this.distances[i][j] = HopfieldNet.calculateDistance(cities[i], cities[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private static kroneckerDelta(x: number, y: number): number {\r\n    return (x === y) ? 1 : 0;\r\n  }\r\n\r\n  private static calculateDistance(a: City, b: City) {\r\n    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\r\n  }\r\n\r\n  private static initializeArray(n: number): number[] {\r\n    return Array.from({ length: n });\r\n  }\r\n\r\n  private static initializeSquareMatrix(n: number): number[][] {\r\n    return HopfieldNet.initializeArray(n).map(_ => HopfieldNet.initializeArray(n));\r\n  }\r\n\r\n  private static stringifyNeurons(outputs: number[][]): string {\r\n    const rows = outputs.map(row => `[${row.map(output => output.toFixed(4)).join(', ')}]`);\r\n    return `[${rows.join('\\n')}]`;\r\n  }\r\n}\r\n","import React, {ReactNode} from 'react';\r\nimport { IHistoryItem } from './HopfieldUI';\r\nimport {Input} from \"reactstrap\";\r\n\r\ninterface IProps {\r\n  overrideState(state: IHistoryItem): void;\r\n  history: IHistoryItem[];\r\n}\r\n\r\nexport default class HopfieldHistory extends React.Component<IProps, {}> {\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.optionChanged = this.optionChanged.bind(this);\r\n  }\r\n\r\n  optionChanged(event: React.FormEvent<HTMLInputElement>): void {\r\n    const i: number = Number(event.currentTarget.value);\r\n    // @ts-ignore\r\n    this.props.overrideState(this.props.history.find(item => item.index === i));\r\n  }\r\n\r\n  render(): ReactNode {\r\n    return (\r\n      <Input type=\"select\" size={10} onChange={this.optionChanged}>\r\n        {this.props.history.map(item => (\r\n          <option value={item.index}>\r\n            Počet měst: {item.cities.length}, délka: {item.distance.toFixed(3)}\r\n          </option>\r\n        ))}\r\n      </Input>\r\n    );\r\n  }\r\n}\r\n","export default class City {\r\n    public readonly x: number;\r\n    public readonly y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","import React, {ReactNode} from 'react';\r\nimport {Button, Col, Row} from \"reactstrap\";\r\nimport HopfieldCanvas from \"./HopfieldCanvas\";\r\nimport HopfieldSettings from \"./HopfieldSettings\";\r\nimport HopfieldNet from \"./HopfieldNet\";\r\nimport HopfieldHistory from \"./HopfieldHistory\";\r\nimport City from \"./City\";\r\n\r\nexport interface ICity {\r\n  index: number;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IPath {\r\n  order: number;\r\n  startCityIndex: number;\r\n  endCityIndex: number;\r\n}\r\n\r\nexport interface ISettings {\r\n  dt: number;\r\n  alpha: number;\r\n  A: number;\r\n  B: number;\r\n  C: number;\r\n  D: number;\r\n  maxIterations: number;\r\n  tau: number;\r\n  advanced: boolean;\r\n}\r\n\r\nexport const DEFAULT_SETTINGS: ISettings = {\r\n  dt: 0.05,\r\n  alpha: 3,\r\n  A: 0.5,\r\n  B: 0.5,\r\n  C: 0.2,\r\n  D: 1.25,\r\n  maxIterations: 1500,\r\n  tau: 1.0,\r\n  advanced: true,\r\n};\r\n\r\nexport const DEFAULT_CITIES: ICity[] = [\r\n  { index: 0, x: 100, y: 300 },\r\n  { index: 1, x: 200, y: 150 },\r\n  { index: 2, x: 75, y: 200 },\r\n  { index: 3, x: 350, y: 50 },\r\n];\r\n\r\ninterface IState {\r\n  settings: ISettings;\r\n  cities: ICity[];\r\n  paths: IPath[];\r\n  history: IHistoryItem[];\r\n  totalDistance?: number;\r\n}\r\n\r\nexport interface IHistoryItem {\r\n  index: number;\r\n  cities: ICity[];\r\n  paths: IPath[];\r\n  settings: ISettings;\r\n  distance: number;\r\n}\r\n\r\nexport default class HopfieldUI extends React.Component<{}, IState> {\r\n  private historyI = 0;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      settings: DEFAULT_SETTINGS,\r\n      cities: [],\r\n      paths: [],\r\n      history: [],\r\n    };\r\n\r\n    this.setSettings = this.setSettings.bind(this);\r\n    this.addCity = this.addCity.bind(this);\r\n    this.removeCity = this.removeCity.bind(this);\r\n    this.findPaths = this.findPaths.bind(this);\r\n    this.setDefaultCities = this.setDefaultCities.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.overrideState = this.overrideState.bind(this);\r\n    this.clearHistory = this.clearHistory.bind(this);\r\n  }\r\n\r\n  setSettings(newSettings: Partial<ISettings>): void {\r\n    const merged = {\r\n      ...this.state.settings,\r\n      ...newSettings,\r\n    };\r\n    this.setState({\r\n      settings: merged,\r\n    });\r\n  }\r\n\r\n  addCity(city: ICity) {\r\n    this.setState(prevState => ({\r\n      cities: [...prevState.cities, city],\r\n    }))\r\n  }\r\n\r\n  removeCity(index: number) {\r\n    this.setState(prevState => ({\r\n      cities: prevState.cities.filter(c => c.index !== index)\r\n    }));\r\n  }\r\n\r\n  findPaths(): void {\r\n    const cities = this.state.cities.map(({x, y}) => new City(x, y));\r\n    const net = new HopfieldNet(cities, this.state.settings);\r\n\r\n    let _paths, _distance;\r\n    if (this.state.settings.advanced) {\r\n      console.log(\"Please wait...\");\r\n      const { paths, distance, k } = net.train2();\r\n      console.log(`Finished, found min in iteration ${k}`);\r\n\r\n      _paths = HopfieldUI.transformPaths(paths);\r\n      _distance = distance;\r\n    }\r\n    else {\r\n      net.train();\r\n      _distance = net.totalDistance;\r\n      _paths = HopfieldUI.transformPaths(net.tourByTime);\r\n    }\r\n\r\n    const item: IHistoryItem = {\r\n      index: this.historyI,\r\n      cities: this.state.cities,\r\n      paths: _paths,\r\n      settings: this.state.settings,\r\n      distance: _distance,\r\n    };\r\n    this.historyI++;\r\n    this.state.history.push(JSON.parse(JSON.stringify(item)));\r\n\r\n    this.setState({\r\n      totalDistance: _distance,\r\n      paths: _paths,\r\n    });\r\n\r\n  }\r\n\r\n  static transformPaths(paths: number[]): IPath[] {\r\n    const p: IPath[] = [];\r\n    for (let i = 0; i < paths.length; i++) {\r\n      const j = (i === paths.length - 1) ? 0 : i + 1;\r\n      p.push({\r\n        order: i,\r\n        startCityIndex: paths[i],\r\n        endCityIndex: paths[j]\r\n      });\r\n    }\r\n    return p;\r\n  }\r\n\r\n  setDefaultCities(): void {\r\n    this.setState({\r\n      cities: DEFAULT_CITIES,\r\n    });\r\n  }\r\n\r\n  reset(): void {\r\n    this.setState({\r\n      totalDistance: undefined,\r\n      cities: [],\r\n      paths: [],\r\n    })\r\n  }\r\n\r\n  overrideState(state: IHistoryItem): void {\r\n    this.setState({\r\n      paths: state.paths,\r\n      totalDistance: state.distance,\r\n      cities: state.cities,\r\n      settings: state.settings, // TODO: broken, not connected this.state.settings => <HopfieldSettings>\r\n    });\r\n  }\r\n\r\n  clearHistory(): void {\r\n    this.historyI = 0;\r\n    this.setState({\r\n      history: [],\r\n    });\r\n  }\r\n\r\n  render(): ReactNode {\r\n    return (\r\n      <Row style={{ marginTop: 20 }}>\r\n        <Col md={5}>\r\n          <h4>Nastavení parametrů</h4>\r\n          <HopfieldSettings setSettings={this.setSettings} settings={this.state.settings} /> <br />\r\n          <Button onClick={this.findPaths}>Najít cestu</Button>\r\n          {/*<Button onClick={this.setDefaultCities}>Set default cities</Button> <br />*/}\r\n          <Button onClick={this.reset} style={{ marginLeft: 15 }}>Reset</Button>\r\n          <Button onClick={this.clearHistory} style={{ marginLeft: 15 }}>Vyčistit historii</Button>\r\n          <br />\r\n          {this.state.totalDistance && (<span style={{ marginTop: 10 }}>Celková délka cesty: {this.state.totalDistance.toFixed(3)}</span>)}\r\n          <br />\r\n          {this.state.history.length > 0 && (<>\r\n            <h4>Historie</h4>\r\n            <HopfieldHistory overrideState={this.overrideState} history={this.state.history.sort((a, b) => b.index - a.index)} />\r\n          </>)}\r\n        </Col>\r\n        <Col md={7}>\r\n          <HopfieldCanvas addCity={this.addCity} removeCity={this.removeCity} cities={this.state.cities} paths={this.state.paths} />\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Container, Col} from 'reactstrap';\r\nimport HopfieldUI from './HopfieldUI';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container fluid>\r\n        <Col md={{\r\n          size: 9,\r\n          offset: 2\r\n        }}>\r\n          <h1>Problém obchodního cestujícího</h1>\r\n          <HopfieldUI />\r\n        </Col>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}